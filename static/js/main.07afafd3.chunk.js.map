{"version":3,"sources":["components/TaskList/Task/Task.module.css","components/TaskList/TaskList.module.css","components/Header/Header.module.css","components/Header/Header.js","components/Form/Form.js","components/TaskList/Task/Task.js","components/TaskList/TaskList.js","containers/App.js","serviceWorker.js","index.js","components/Form/Form.module.css"],"names":["module","exports","task","taskDesc","done","icon","deleteBtn","container","input","checkmark","taskList","header","heading__primary","heading__secondary","Header","props","react_default","a","createElement","className","style","Form","form","onSubmit","formSubmit","taskInput","value","text","placeholder","onChange","changeHandler","btn","Task","isChecked","description","type","checkboxHandler","checked","onClick","deleteTask","TaskList","tasks","map","index","TaskList_Task_Task","taskDescription","bind","key","taskStatus","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","inputChangeHandler","event","setState","target","formSubmitHandler","preventDefault","state","trim","toConsumableArray","tasksList","push","deleteTaskHandler","splice","localStorage","getItem","JSON","parse","setItem","stringify","components_Header_Header","components_Form_Form","components_TaskList_TaskList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07afafd3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__3_zAp\",\"taskDesc\":\"Task_taskDesc__3kKqB\",\"done\":\"Task_done__3lSRU\",\"icon\":\"Task_icon__3GBrG\",\"deleteBtn\":\"Task_deleteBtn__2Bf8B\",\"container\":\"Task_container__Tt6uH\",\"input\":\"Task_input__1EwoB\",\"checkmark\":\"Task_checkmark__13XRG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"taskList\":\"TaskList_taskList__11mn5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1e7Dy\",\"heading__primary\":\"Header_heading__primary__3PYpv\",\"heading__secondary\":\"Header_heading__secondary__tgaLE\"};","import React from 'react';\nimport style from './Header.module.css';\n\nconst Header = (props) => {\n  return (\n    <header className={style.header}>\n      <h1 className={style.heading__primary}>Task Manager</h1>\n      <p className={style.heading__secondary}>Get Your Tasks Done</p>\n    </header>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport style from './Form.module.css';\n\nconst Form = (props) => {\n  return (\n    <form  className={style.form} onSubmit={props.formSubmit}>\n      <input \n        className={style.taskInput} \n        value={props.text} \n        placeholder=\"Enter Task\" \n        onChange={props.changeHandler}\n      />\n      <button className={style.btn}>Add Task</button>\n    </form>\n  );\n}\n\nexport default Form;","import React from 'react';\nimport style from './Task.module.css';\n\nconst Task = (props) => {\n  let taskDesc = style.taskDesc;\n  if(props.isChecked) {\n    taskDesc = taskDesc + ' ' + style.done;\n  }\n  return (\n    <div className={style.task}>\n      <p className={taskDesc}>{props.description}</p>\n      <div className={style.icon}>\n        <label className={style.container}>\n          <input\n            className={style.input}\n            type=\"checkbox\"\n            onChange={props.checkboxHandler}\n            checked={props.isChecked} />\n          <span className={style.checkmark}></span>\n        </label>\n        <button className={style.deleteBtn} onClick={props.deleteTask}>X</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Task;","import React from 'react';\nimport Task from './Task/Task';\nimport style from './TaskList.module.css';\n\nconst TaskList = (props) => {\n  const tasks = props.tasks.map((task, index) => {\n    return <Task \n      description={task.taskDescription} \n      checkboxHandler={props.checkboxHandler.bind(null, index)}\n      key={index}\n      isChecked={task.taskStatus}\n      deleteTask={props.deleteTask.bind(null, index)}\n      />;\n  });\n  return (\n    <div className={style.taskList}>\n      {tasks}\n    </div>\n  );\n}\n\nexport default TaskList;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from '../components/Header/Header';\nimport Form from '../components/Form/Form';\nimport TaskList from '../components/TaskList/TaskList';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    /**\n     * taskList = [{ taskDescription: '', taskStatus: 'done'}]\n     */\n    if (localStorage.getItem('tasks')) {\n      const tasks = JSON.parse(localStorage.getItem('tasks'));\n      this.state = {\n        taskInput: '',\n        tasksList: tasks\n      }\n    } else {\n      this.state = {\n        taskInput: '',\n        tasksList: []\n      };\n      localStorage.setItem('tasks', JSON.stringify(this.state.tasksList));\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('tasks', JSON.stringify(this.state.tasksList));\n  }\n\n  inputChangeHandler = (event) => {\n    this.setState({\n      taskInput: event.target.value\n    })\n  };\n\n  formSubmitHandler = (event) => {\n    event.preventDefault();\n    const taskDescription = this.state.taskInput.trim();\n    if(taskDescription === '') return;\n\n    const tasks = [ ...this.state.tasksList ];\n    tasks.push({\n      taskDescription,\n      taskStatus: false\n    });\n\n    this.setState({\n      taskInput: '',\n      tasksList: tasks\n    });\n  };\n\n  checkboxHandler = (index, event) => {\n    const tasks = [ ...this.state.tasksList ];\n    tasks[index].taskStatus = !tasks[index].taskStatus;\n\n    this.setState({\n      tasksList: tasks\n    });\n  };\n\n  deleteTaskHandler = (index, event) => {\n    const tasks = [ ...this.state.tasksList ];\n    tasks.splice(index, 1);\n    this.setState({\n      tasksList: tasks\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Form \n          text={this.state.taskInput} \n          changeHandler={this.inputChangeHandler} \n          formSubmit={this.formSubmitHandler} \n        />\n        <TaskList \n          tasks={this.state.tasksList}\n          checkboxHandler={this.checkboxHandler}\n          deleteTask={this.deleteTaskHandler}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__PWsyX\",\"taskInput\":\"Form_taskInput__3yhIj\",\"btn\":\"Form_btn__1sObj\"};"],"sourceRoot":""}